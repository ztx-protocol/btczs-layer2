name: 🔄 BTCZ Core Synchronization

on:
  schedule:
    # Check for updates daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      force_sync:
        description: 'Force synchronization even if no changes'
        required: false
        default: 'false'

env:
  BTCZ_CORE_REPO: 'https://github.com/ztx-protocol/btcz-core.git'
  BTCZ_CORE_BRANCH: 'main'

jobs:
  sync-btcz-core:
    name: 🔄 Sync with BTCZ Core
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout BTCZS repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: 🔧 Setup Git
      run: |
        git config --global user.name "BTCZS Bot"
        git config --global user.email "btczs-bot@users.noreply.github.com"

    - name: 📥 Clone BTCZ Core repository
      run: |
        echo "🔄 Cloning BTCZ Core repository..."
        git clone ${{ env.BTCZ_CORE_REPO }} btcz-core-upstream
        cd btcz-core-upstream
        
        # Get latest commit info
        LATEST_COMMIT=$(git rev-parse HEAD)
        LATEST_MESSAGE=$(git log -1 --pretty=format:"%s")
        LATEST_DATE=$(git log -1 --pretty=format:"%ci")
        
        echo "📊 Latest BTCZ Core commit:"
        echo "  Hash: $LATEST_COMMIT"
        echo "  Message: $LATEST_MESSAGE"
        echo "  Date: $LATEST_DATE"
        
        # Save commit info for later steps
        echo "BTCZ_LATEST_COMMIT=$LATEST_COMMIT" >> $GITHUB_ENV
        echo "BTCZ_LATEST_MESSAGE=$LATEST_MESSAGE" >> $GITHUB_ENV
        echo "BTCZ_LATEST_DATE=$LATEST_DATE" >> $GITHUB_ENV

    - name: 🔍 Check for changes
      id: changes
      run: |
        # Check if we have a record of the last synced commit
        if [ -f ".btcz-core-sync" ]; then
          LAST_SYNCED=$(cat .btcz-core-sync)
          echo "📋 Last synced commit: $LAST_SYNCED"
          echo "📋 Latest commit: ${{ env.BTCZ_LATEST_COMMIT }}"
          
          if [ "$LAST_SYNCED" = "${{ env.BTCZ_LATEST_COMMIT }}" ] && [ "${{ github.event.inputs.force_sync }}" != "true" ]; then
            echo "✅ No new changes in BTCZ Core"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "🔄 New changes detected in BTCZ Core"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "🆕 First time sync"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: 📊 Analyze changes
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        cd btcz-core-upstream
        
        echo "📊 Analyzing BTCZ Core changes..."
        
        # Get list of changed files since last sync
        if [ -f "../.btcz-core-sync" ]; then
          LAST_SYNCED=$(cat ../.btcz-core-sync)
          echo "📋 Files changed since last sync:"
          git diff --name-only $LAST_SYNCED HEAD || echo "Unable to get diff"
          
          echo "📋 Commit messages since last sync:"
          git log --oneline $LAST_SYNCED..HEAD || echo "Unable to get log"
        else
          echo "📋 Recent commits (last 10):"
          git log --oneline -10
        fi

    - name: 🔄 Update integration documentation
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        echo "🔄 Updating BTCZ Core integration documentation..."
        
        # Create or update BTCZ_CORE_INTEGRATION.md
        cat > BTCZ_CORE_INTEGRATION.md << EOF
        # 🔗 BTCZ Core Integration Status
        
        ## 📊 Current Integration
        
        **BTCZ Core Repository**: [\`ztx-protocol/btcz-core\`](${{ env.BTCZ_CORE_REPO }})
        
        **Last Synchronized**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        **Latest BTCZ Core Commit**: 
        - **Hash**: \`${{ env.BTCZ_LATEST_COMMIT }}\`
        - **Message**: ${{ env.BTCZ_LATEST_MESSAGE }}
        - **Date**: ${{ env.BTCZ_LATEST_DATE }}
        
        ## 🔄 Integration Points
        
        ### ✅ Compatible Components
        - **RPC Interface**: BitcoinZ-compatible JSON-RPC
        - **Address Format**: P2PKH/P2SH address support
        - **Transaction Structure**: UTXO model compatibility
        - **Block Headers**: SHA256 double hashing
        
        ### 🔍 Monitoring Areas
        - **Consensus Changes**: Protocol modifications
        - **RPC Updates**: New methods or parameter changes
        - **Network Parameters**: Block time, difficulty adjustments
        - **Address Formats**: New address types
        
        ## 📋 Integration Checklist
        
        When BTCZ Core updates:
        - [ ] Review consensus changes
        - [ ] Test RPC compatibility
        - [ ] Verify address handling
        - [ ] Update BTCZS parameters if needed
        - [ ] Run integration tests
        - [ ] Update documentation
        
        ## 🚨 Breaking Changes Alert
        
        Monitor for these potential breaking changes:
        - RPC method signature changes
        - New address formats
        - Consensus rule modifications
        - Network parameter updates
        
        ---
        
        *Auto-generated by BTCZS CI/CD pipeline*
        *Next sync: $(date -u -d "+1 day" +"%Y-%m-%d %H:%M:%S UTC")*
        EOF

    - name: 📝 Update sync record
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        echo "${{ env.BTCZ_LATEST_COMMIT }}" > .btcz-core-sync
        echo "📝 Updated sync record with commit: ${{ env.BTCZ_LATEST_COMMIT }}"

    - name: 🚀 Commit changes
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        git add .
        git commit -m "🔄 Sync with BTCZ Core ${{ env.BTCZ_LATEST_COMMIT }}

        📊 BTCZ Core Update:
        - Commit: ${{ env.BTCZ_LATEST_COMMIT }}
        - Message: ${{ env.BTCZ_LATEST_MESSAGE }}
        - Date: ${{ env.BTCZ_LATEST_DATE }}
        
        🔄 Updated integration documentation
        📝 Updated sync record
        
        Auto-sync by BTCZS CI/CD pipeline"
        
        git push origin main

    - name: 🔔 Create issue for manual review
      if: steps.changes.outputs.has_changes == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🔄 BTCZ Core Update Detected - Manual Review Required',
            body: `## 🔄 BTCZ Core Synchronization Alert
            
            **New changes detected in BTCZ Core repository!**
            
            ### 📊 Update Details
            - **Repository**: [ztx-protocol/btcz-core](https://github.com/ztx-protocol/btcz-core)
            - **Latest Commit**: \`${{ env.BTCZ_LATEST_COMMIT }}\`
            - **Commit Message**: ${{ env.BTCZ_LATEST_MESSAGE }}
            - **Date**: ${{ env.BTCZ_LATEST_DATE }}
            
            ### 🔍 Required Actions
            - [ ] Review changes for compatibility impact
            - [ ] Test BTCZS integration with new BTCZ Core
            - [ ] Update BTCZS parameters if needed
            - [ ] Run full integration test suite
            - [ ] Update documentation if required
            
            ### 📋 Integration Status
            The integration documentation has been automatically updated in \`BTCZ_CORE_INTEGRATION.md\`.
            
            ### ⚠️ Important
            Please review the changes and ensure BTCZS compatibility before closing this issue.
            
            ---
            *Auto-generated by BTCZS CI/CD pipeline*`,
            labels: ['btcz-core-sync', 'needs-review', 'integration']
          });
          
          console.log('Created issue:', issue.data.number);

    - name: 📊 Summary
      run: |
        if [ "${{ steps.changes.outputs.has_changes }}" = "true" ]; then
          echo "✅ BTCZ Core sync completed successfully"
          echo "📝 Updated integration documentation"
          echo "🔔 Created issue for manual review"
        else
          echo "ℹ️ No changes detected in BTCZ Core"
          echo "✅ BTCZS is up to date"
        fi
        
        echo "🔄 Next automatic sync: $(date -u -d "+1 day" +"%Y-%m-%d %H:%M:%S UTC")"
