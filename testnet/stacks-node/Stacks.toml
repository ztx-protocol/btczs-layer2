[node]
name = "btczs-mainnet-node"
rpc_bind = "0.0.0.0:20443"
p2p_bind = "0.0.0.0:20444"
data_dir = "/Users/mac/Documents/augment-projects/layer2/btczs-data"
working_dir = "/Users/mac/Documents/augment-projects/layer2/btczs-working"

[network]
name = "mainnet"

## Settings for local testnet, relying on a local bitcoind server
## running with the following bitcoin.conf:
##
##    chain=regtest
##    disablewallet=0
##    txindex=1
##    server=1
##    rpcuser=helium-node
##    rpcpassword=secret
##
# [burnchain]
# chain = "bitcoin"
# mode = "helium"
# peer_host = "127.0.0.1"
# peer_port = 18444
# rpc_port = 18443
# rpc_ssl = false
# username = "helium-node"
# password = "secret"
# timeout = 30
# local_mining_public_key = "04ee0b1602eb18fef7986887a7e8769a30c9df981d33c8380d255edef003abdcd243a0eb74afdf6740e6c423e62aec631519a24cf5b1d62bf8a3e06ddc695dcb77"
# satoshis_per_byte = 50
# commit_anchor_block_within = 3000

## Settings for public testnet, relying on a remote bitcoind server
## hosted by blockstack
##
# [burnchain]
# chain = "bitcoin"
# mode = "argon"
# peer_host = "argon.blockstack.org"
# satoshis_per_byte = 50
# commit_anchor_block_within = 10000
# rpc_port = 3000
# peer_port = 18444

## BTCZS Mainnet Configuration
## Using real BitcoinZ mainnet as burnchain
##
[burnchain]
chain = "bitcoinz"
mode = "mainnet"
peer_host = "127.0.0.1"
peer_port = 1989
rpc_port = 1979
rpc_ssl = false
username = "test"
password = "test"
timeout = 30
satoshis_per_byte = 1
commit_anchor_block_within = 5000

# BTCZS Mainnet - No pre-allocated balances
# All STX tokens will be earned through PoX stacking and mining

## Event dispatcher
## The stacks blockchain can be observed by sidecar processes, notified through TCP socket, of events such as:
## - print
## - stx-transfer / stx-burn
## - ft-mint / ft-transfer
## - nft-mint / nft-transfer
## A demo is available here: https://github.com/blockstack/stacks-blockchain-sidecar
##
# [[events_observer]]
# port = 8080
# address = "127.0.0.1"
# events_keys = [
#     "STGT7GSMZG7EA0TS6MVSKT5JC1DCDFGZWJJZXN8A.store::print",
#     "STGT7GSMZG7EA0TS6MVSKT5JC1DCDFGZWJJZXN8A.contract.ft-token",
#     "STGT7GSMZG7EA0TS6MVSKT5JC1DCDFGZWJJZXN8A.contract.nft-token",
#     "stx"
# ]

## Atlas database
## The Atlas database, which handles file attachments, can be configured here
## The values used in the example below are the minimum values which Atlas will accept
## 
#[atlas]
#attachments_max_size = 1048576
#max_uninstantiated_attachments = 10000
#uninstantiated_attachments_expire_after = 3600
#unresolved_attachment_instances_expire_after = 172800
